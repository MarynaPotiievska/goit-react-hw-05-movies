{"version":3,"file":"static/js/244.fa446164.chunk.js","mappings":"8SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAgB,mCAAG,WAAOC,GAAP,uFACZF,EAAAA,EAAAA,IAAU,eAAgB,CAC5CG,OAAQ,CACPC,QAASL,EACTM,MAAOH,KAJsB,cACzBI,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,sDAYhBC,EAAmB,mCAAG,oGACfT,EAAAA,EAAAA,IAAU,qBAAsB,CAClDG,OAAQ,CACPC,QAASL,KAHuB,cAC5BO,EAD4B,yBAM3BA,EAAKC,KAAKC,SANiB,2CAAH,qDAUnBE,EAAiB,mCAAG,WAAOC,GAAP,uFACbX,EAAAA,EAAAA,IAAA,gBAAmBW,GAAM,CAC3CR,OAAQ,CACPC,QAASL,KAHqB,cAC1BO,EAD0B,yBAMzBA,EAAKC,MANoB,2CAAH,sDAUjBK,EAAc,mCAAG,WAAOC,GAAP,uFACVb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACxDV,OAAQ,CACPC,QAASL,KAHkB,cACvBO,EADuB,yBAMtBA,EAAKC,KAAKO,MANY,2CAAH,sDAUdC,EAAiB,mCAAG,WAAOF,GAAP,uFACbb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACxDV,OAAQ,CACPC,QAASL,KAHqB,cAC1BO,EAD0B,yBAMzBA,EAAKC,KAAKC,SANe,2CAAH,qD,+JC7CjBQ,EAAaC,EAAAA,EAAAA,GAAH,yCAIVC,EAASD,EAAAA,EAAAA,GAAH,oEAKNE,EAAaF,EAAAA,EAAAA,KAAH,sD,GAIEA,EAAAA,EAAAA,EAAH,4C,QC4BtB,EAtCgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEQb,GAAYc,EAAAA,EAAAA,MAAZd,QAiBR,OAfAe,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIF,GAAa,GAFjB,UAGuBX,EAAAA,EAAAA,IAAkBF,GAHzC,OAGUP,EAHV,OAIIgB,EAAWhB,GAJf,gDAMIkB,EAAS,mDANb,yBAQIE,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdG,EACD,GAAE,CAAChB,KAGF,0BACGQ,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASrB,EAApB,EAAoBA,GAApB,OACX,UAACK,EAAD,YACE,UAACE,EAAD,uBACU,SAACC,EAAD,UAAaY,QAEvB,uBAAIC,MAJWrB,EADN,IAQZc,IAAa,uCACbF,IAAS,wBAAKA,MAGpB,C","sources":["api.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '2390bc0c07f3ecc54a6e60472acdfb3a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovieByName = async (name) => {\n\tconst resp = await axios.get('search/movie', {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: name\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\n\nexport const fetchTrendingMovies = async () => {\n\tconst resp = await axios.get('trending/movie/day', {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\nexport const fetchMovieDetails = async (id) => {\n\tconst resp = await axios.get(`movie/${id}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data;\n\t// resp.data - object\n};\n\nexport const fetchMovieCast = async (movieId) => {\n\tconst resp = await axios.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.cast;\n\t// resp.data.results - array of objects\n};\n\nexport const fetchMovieReviews = async (movieId) => {\n\tconst resp = await axios.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\n\n","import styled from '@emotion/styled';\n\nexport const ReviewCard = styled.li`\n  padding: 4px;\n`;\n\nexport const Author = styled.h3`\n  margin-bottom: 4px;\n  font-weight: 500;\n`;\n\nexport const AuthorName = styled.span`\n  text-transform: uppercase;\n`;\n\nexport const Character = styled.p`\n  font-size: 12px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'api';\nimport { Author, AuthorName, ReviewCard } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function gettingMovieReviews() {\n      try {\n        setIsLoading(true);\n        const resp = await fetchMovieReviews(movieId);\n        setReviews(resp);\n      } catch (error) {\n        setError('Sorry, something went wrong. Please, try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    gettingMovieReviews();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.map(({ author, content, id }) => (\n        <ReviewCard key={id}>\n          <Author>\n            Author: <AuthorName>{author}</AuthorName>\n          </Author>\n          <p>{content}</p>\n        </ReviewCard>\n      ))}\n      {isLoading && <li>Loading...</li>}\n      {error && <li>{error}</li>}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","axios","fetchMovieByName","name","params","api_key","query","resp","data","results","fetchTrendingMovies","fetchMovieDetails","id","fetchMovieCast","movieId","cast","fetchMovieReviews","ReviewCard","styled","Author","AuthorName","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useParams","useEffect","gettingMovieReviews","map","author","content"],"sourceRoot":""}