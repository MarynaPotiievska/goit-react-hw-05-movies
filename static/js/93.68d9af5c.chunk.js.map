{"version":3,"file":"static/js/93.68d9af5c.chunk.js","mappings":"6SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAgB,mCAAG,WAAOC,GAAP,uFACZF,EAAAA,EAAAA,IAAU,eAAgB,CAC5CG,OAAQ,CACPC,QAASL,EACTM,MAAOH,KAJsB,cACzBI,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,sDAYhBC,EAAmB,mCAAG,oGACfT,EAAAA,EAAAA,IAAU,qBAAsB,CAClDG,OAAQ,CACPC,QAASL,KAHuB,cAC5BO,EAD4B,yBAM3BA,EAAKC,KAAKC,SANiB,2CAAH,qDAUnBE,EAAiB,mCAAG,WAAOC,GAAP,uFACbX,EAAAA,EAAAA,IAAA,gBAAmBW,GAAM,CAC3CR,OAAQ,CACPC,QAASL,KAHqB,cAC1BO,EAD0B,yBAMzBA,EAAKC,MANoB,2CAAH,sDAUjBK,EAAc,mCAAG,WAAOC,GAAP,uFACVb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACxDV,OAAQ,CACPC,QAASL,KAHkB,cACvBO,EADuB,yBAMtBA,EAAKC,KAAKO,MANY,2CAAH,sDAUdC,EAAiB,mCAAG,WAAOF,GAAP,uFACbb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsC,CACxDV,OAAQ,CACPC,QAASL,KAHqB,cAC1BO,EAD0B,yBAMzBA,EAAKC,KAAKC,SANe,2CAAH,qD,8JC7CjBQ,EAAgBC,EAAAA,EAAAA,GAAH,wEAMbC,EAAQD,EAAAA,EAAAA,IAAH,4EAMLE,EAAYF,EAAAA,EAAAA,GAAH,oEAKTG,EAAYH,EAAAA,EAAAA,EAAH,4C,SCgCtB,EA9Ca,WACX,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAEQb,GAAYc,EAAAA,EAAAA,MAAZd,QAiBR,OAfAe,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIF,GAAa,GAFjB,UAGuBd,EAAAA,EAAAA,IAAeC,GAHtC,OAGUP,EAHV,OAIIgB,EAAQhB,GAJZ,gDAMIkB,EAAS,mDANb,yBAQIE,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdG,EACD,GAAE,CAAChB,KAGF,0BACGC,GACCA,EAAKgB,KAAI,gBAAG5B,EAAH,EAAGA,KAAM6B,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,QAASC,EAAhC,EAAgCA,UAAhC,OACP,UAACjB,EAAD,YACE,SAACE,EAAD,CACEgB,IACE,8CAAuCH,IACvC,EAEFI,IAAKjC,KAEP,4BACE,SAACiB,EAAD,UAAYjB,KACZ,UAACkB,EAAD,yBAAuBa,UAVPD,EADb,IAeVP,IAAa,oCACbF,IAAS,wBAAKA,MAGpB,C","sources":["api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '2390bc0c07f3ecc54a6e60472acdfb3a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovieByName = async (name) => {\n\tconst resp = await axios.get('search/movie', {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: name\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\n\nexport const fetchTrendingMovies = async () => {\n\tconst resp = await axios.get('trending/movie/day', {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\nexport const fetchMovieDetails = async (id) => {\n\tconst resp = await axios.get(`movie/${id}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data;\n\t// resp.data - object\n};\n\nexport const fetchMovieCast = async (movieId) => {\n\tconst resp = await axios.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.cast;\n\t// resp.data.results - array of objects\n};\n\nexport const fetchMovieReviews = async (movieId) => {\n\tconst resp = await axios.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t});\n\treturn resp.data.results;\n\t// resp.data.results - array of objects\n};\n\n\n","import styled from '@emotion/styled';\n\nexport const CharacterCard = styled.li`\n  display: flex;\n  gap: 8px;\n  padding: 4px;\n`;\n\nexport const Photo = styled.img`\n  display: block;\n  width: 50px;\n  height: 68px;\n`;\n\nexport const ActorName = styled.h3`\n  margin-bottom: 4px;\n  font-weight: 500;\n`;\n\nexport const Character = styled.p`\n  font-size: 12px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'api';\nimport { ActorName, Character, CharacterCard, Photo } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function gettingMovieCast() {\n      try {\n        setIsLoading(true);\n        const resp = await fetchMovieCast(movieId);\n        setCast(resp);\n      } catch (error) {\n        setError('Sorry, something went wrong. Please, try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    gettingMovieCast();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {cast &&\n        cast.map(({ name, profile_path, cast_id, character }) => (\n          <CharacterCard key={cast_id}>\n            <Photo\n              src={\n                `https://www.themoviedb.org/t/p/w500/${profile_path}` ||\n                'https://via.placeholder.com/100x50.jpg/A3A3A3?Text=There+is+no+photo'\n              }\n              alt={name}\n            />\n            <div>\n              <ActorName>{name}</ActorName>\n              <Character>Character: {character}</Character>\n            </div>\n          </CharacterCard>\n        ))}\n      {isLoading && <li>Loading</li>}\n      {error && <li>{error}</li>}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","fetchMovieByName","name","params","api_key","query","resp","data","results","fetchTrendingMovies","fetchMovieDetails","id","fetchMovieCast","movieId","cast","fetchMovieReviews","CharacterCard","styled","Photo","ActorName","Character","useState","setCast","error","setError","isLoading","setIsLoading","useParams","useEffect","gettingMovieCast","map","profile_path","cast_id","character","src","alt"],"sourceRoot":""}